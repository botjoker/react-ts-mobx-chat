{"version":3,"sources":["AppState.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppState","users","messages","user","message","this","push","id","Math","random","decorate","observable","chatInput","action","Content","Layout","ChatWindow","inject","observer","props","store","map","className","key","avatar","style","backgroundColor","author","content","ChatInput","useState","setMessage","value","onChange","event","target","onKeyPress","App","padding","marginTop","index","span","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6UAIqBA,E,iDACnBC,MAAQ,CACN,OACA,UACA,QACA,Q,KAGFC,SAA2B,G,sDAGjBC,EAAcC,GACtBC,KAAKH,SAASI,KAAK,CAACC,GAAkB,IAAdC,KAAKC,SAAcN,OAAMC,gB,KAIrDM,YAAUV,EAAU,CAClBC,MAAOU,IACPT,SAAUS,IACVC,UAAWC,M,IClBLC,EAAYC,IAAZD,QAOFE,EAAaC,YAAO,QAAPA,CACjBC,aAAW,SAACC,GACV,OACE,6BACGA,EAAMC,MAAOlB,SAAWiB,EAAMC,MAAOlB,SAASmB,KAC7C,SAACjB,GAAD,OACE,yBAAKkB,UAAU,iBAAiBC,IAAKnB,EAAQG,IAC3C,kBAAC,IAAD,CACEe,UAAYlB,EAAQD,OAASgB,EAAMhB,KAAO,qBAAuB,GACjEqB,OAAS,kBAAC,IAAD,CAAQC,MAAO,CAAEC,gBAAiB,YAActB,EAAQD,KAAK,IACtEwB,OAAQvB,EAAQD,KAChByB,QAASxB,EAAQA,cAIrB,UAONyB,EAAYZ,YAAO,QAAPA,CAChBC,aAAU,SAACC,GAA+C,IAAD,EAEzBW,mBAAiB,IAFQ,mBAEhD1B,EAFgD,KAEvC2B,EAFuC,KAYvD,OACE,oCACE,+BAAQZ,EAAMhB,KAAd,UAAiC,6BACjC,2BACE6B,MAAO5B,EACP6B,SAbgB,SAACC,GACrBH,EAAWG,EAAMC,OAAOH,QAapBI,WAXkB,SAACF,GACL,UAAdA,EAAMX,KAAmBnB,GAC3Be,EAAMC,MAAOR,UAAUO,EAAMhB,KAAMC,WA6C5BiC,E,4MA5BbjB,MAAQ,IAAIpB,E,uDAGV,OACE,kBAAC,IAAD,KACE,kBAACc,EAAD,CAASQ,UAAU,cAAcG,MAAO,CAAEa,QAAS,SAAUC,UAAW,KACtE,kBAAC,IAAD,CAAUnB,MAAOf,KAAKe,OACpB,6BACE,kBAAC,IAAD,KACGf,KAAKe,MAAMnB,MAAQI,KAAKe,MAAMnB,MAAMoB,KAAI,SAAClB,EAAcqC,GACtD,OACE,kBAAC,IAAD,CAAKlB,UAAU,aAAamB,KAAM,GAAIlB,IAAKiB,GACzC,yBAAKlB,UAAU,aACb,kBAACN,EAAD,CAAYb,KAAMA,IAClB,kBAAC0B,EAAD,CAAW1B,KAAMA,SAIpB,c,GAnBHuC,a,YChDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxD,c","file":"static/js/main.6d84a994.chunk.js","sourcesContent":["import { observable, action, decorate } from \"mobx\";\nimport { IChatMessage } from \"./Interfaces\"\n\n\nexport default class AppState {\n  users = [\n    \"Bill\",\n    \"Charlie\",\n    \"Percy\",\n    \"Fred\"\n  ]\n\n  messages: IChatMessage[] = []\n\n  \n  chatInput(user: string, message: string) {\n    this.messages.push({id: Math.random()*100, user, message})\n  }\n}\n\ndecorate (AppState, {\n  users: observable,\n  messages: observable,\n  chatInput: action\n});","import React, { Component, useState } from 'react';\nimport { Layout, Row, Col, Avatar, Comment } from 'antd';\nimport { Provider, observer, inject } from 'mobx-react';\nimport AppState from './AppState'\nimport { IChatMessage } from \"./Interfaces\"\nconst { Content } = Layout;\n\n\n\n\n\n\nconst ChatWindow = inject(\"store\") (\n  observer (((props: { store?: AppState, user: string })=> {\n    return (\n      <div>\n        {props.store!.messages ? props.store!.messages.map(\n          (message: IChatMessage) => \n            <div className=\"commentWrapper\" key={message.id} >\n              <Comment \n                className={ message.user === props.user ? 'currentUserMessage' : '' } \n                avatar={ <Avatar style={{ backgroundColor: '#f56a00' }}>{message.user[0]}</Avatar> }\n                author={message.user}\n                content={message.message}\n              >\n              </Comment>\n            </div>\n        ) : null}\n      </div>\n    );\n  })\n))\n\n\nconst ChatInput = inject(\"store\") (\n  observer ((props: { store?: AppState, user: string }) => {\n    \n    const [message, setMessage] = useState<string>('')\n\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setMessage(event.target.value)\n    }\n    const keyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter' && message) {\n        props.store!.chatInput(props.user, message)\n      }\n    }\n    return (\n      <>\n        <label>{props.user} said:</label><br/>\n        <input \n          value={message} \n          onChange={changeHandler} \n          onKeyPress={keyPressHandler} \n        />\n      </>\n    );\n  })\n);\n\nclass App extends Component {\n  store = new AppState();\n  \n  render() {\n    return (\n      <Layout>\n        <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n          <Provider store={this.store}>\n            <div>\n              <Row>\n                {this.store.users ? this.store.users.map((user: string, index: number)=>{\n                  return(\n                    <Col className=\"gutter-row\" span={12} key={index}>\n                      <div className=\"chatPanel\" >                      \n                        <ChatWindow user={user} />\n                        <ChatInput user={user} />\n                      </div>\n                    </Col>\n                  )\n                }) : null }\n              </Row>\n            </div>\n          </Provider>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport './style.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}